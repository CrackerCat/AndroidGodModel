static def loadProperties(String sourceFileName, Project pj) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    // System.err.println("Loading property file: " + propFile.absolutePath)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
//            System.out.println("setting ${property.key} : ${property.value}")
            pj.ext[property.key] = property.value
        }
    }
}

loadProperties("$rootDir/local.properties", rootProject)

buildscript {
    ext.kotlin_version = "1.5.21"
    ext.androidTools_version = "7.0.0"
    repositories {
        mavenLocal()
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${androidTools_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

allprojects {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
    }
}

subprojects {
    if (project.name in ["base", "plugin", "godModel"]) {
//        println ">>>>>>>>> ${project.name}"

        def configFile = "${project.projectDir}/config.properties"
        if (!file(configFile).exists()) {
            println "please add config file : ${configFile}"
            exit 0
        }

        loadProperties(configFile, project)
//        println ">>>>>>>> project ${project.name}  versionName : ${project.ext["versionName"]}"
        def ver = project.property(project.ext["versionName"])
        project.ext["version"] = ver
//        println ">>>>>>>> project ${project.name} version is $ver"

        apply plugin: 'java-library'
        apply plugin: 'kotlin'
        java {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
        version = project.ext.version

        jar {
            exclude "**/*.kotlin_module"
        }

        task sourcesJar(type: Jar) {
            archiveClassifier.set("sources")
            from sourceSets.main.allJava
        }

        task javadocJar(type: Jar) {
            archiveClassifier.set("javadoc")
            from javadoc.destinationDir
        }

        if (project.name in ["plugin", "godModel"]) {
            apply plugin: 'java-gradle-plugin'
            gradlePlugin {
                automatedPublishing = false
                plugins {
                    customPlugin {
                        id = "${project.ext.pluginId}"
                        implementationClass = "${project.ext.groupId}.${project.ext.artifactId}.PluginMain"
                    }
                }
            }

            dependencies {
                compileOnly "com.android.tools.build:gradle:$androidTools_version"
                if (project.name == "plugin"){
                    compileOnly "com.rover12421.android.godmodel:core:${godModelCoreVer}"
                }

                implementation "org.ow2.asm:asm:9.2"
                implementation "org.ow2.asm:asm-util:9.2"
            }
        }

        apply plugin: 'maven-publish'
        publishing {
            publications {
                sonatype(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar

                    afterEvaluate {
                        groupId project.ext.groupId
                        artifactId project.ext.artifactId
                    }

                    pom {
                        name        = project.name
                        description = "Android Gradle Model / ${project.ext.groupId} : ${project.ext.artifactId}"
                        url         = 'https://shaka.rover.plus'
                        packaging   = 'jar'
                        licenses {
                            license {
                                name            = 'MIT License'
                                url             = 'https://opensource.org/licenses/mit-license.php'
                                distribution    = 'repo'
                            }
                        }
                        scm {
                            url                 = 'https://github.com/rover12421/AndroidGodModel/tree/master'
                            connection          = 'scm:git:git://github.com/rover12421/AndroidGodModel.git'
                            developerConnection = 'scm:git:git@github.com:rover12421/AndroidGodModel.git'
                        }
                        developers {
                            developer {
                                id      = 'rover12421'
                                name    = 'Rover12421'
                                email   = 'rover12421@163.com'
                            }
                        }
                    }

                }
            }

            repositories {
                maven {
                    url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    credentials {
                        username "${sonatypeUsername}"
                        password "${sonatypePassword}"
                    }
                }
            }
        }

        apply plugin: 'signing'
        signing {
            sign publishing.publications.sonatype
        }

        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}